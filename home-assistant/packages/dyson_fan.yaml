---
homeassistant:
  customize:
    package.node_anchors:
      harmony_dyson_fan_device: &HARMONY_DYSON_FAN_DEVICE
        device: !secret harmony_dyson_fan_device_id

input_boolean:
  dyson_fan_power:
    name: "Dyson Fan - Power"
    initial: "off"
    icon: mdi:fan
  dyson_fan_oscillating:
    name: "Dyson Fan - Oscillating"
    initial: "off"
    icon: mdi:fan

input_number:
  dyson_fan_speed:
    name: "Dyson Fan - Speed"
    min: 1
    max: 10
    step: 1
    icon: mdi:fan
  dyson_fan_target_speed:
    name: "Dyson Fan - Target Speed"
    min: 1
    max: 10
    step: 1
    icon: mdi:fan

script:
  dyson_fan_send_command:
    description: >
      Sends a command to the Dyson Fan, particularly to manage atomicity.
    sequence:
      - service: remote.send_command
        target:
          entity_id: remote.harmony
        data_template:
          <<: *HARMONY_DYSON_FAN_DEVICE
          command: "{{ harmony_command }}"
      # - service: remote.send_command
      #   target:
      #     entity_id: remote.bedroom_broadlink_remote
      #   data:
      #     device: dyson_fan
      #     command: "{{ broadlink_command }}"
    mode: single
  dyson_fan_correct_power:
    alias: "Dyson Fan - Correct Power"
    sequence:
      - service: script.dyson_fan_send_command
        data:
          harmony_command: PowerToggle
          broadlink_command: toggle_power
    mode: single
    icon: mdi:fan
  dyson_fan_toggle_power:
    alias: "Dyson Fan - Toggle Power"
    sequence:
      # Ensure that setting temperature is not currently running to guarantee
      # atomicity with that script.
      - wait_template: >
          {{ is_state("script.dyson_fan_toggle_speed", "off") }}
      - service: script.dyson_fan_send_command
        data:
          harmony_command: PowerToggle
          broadlink_command: toggle_power
      - service: input_boolean.toggle
        target:
          entity_id: input_boolean.dyson_fan_power
      # Delay to allow time for the AC to process the command.
      - delay:
          milliseconds: 100
    mode: queued
    icon: mdi:fan
  dyson_fan_toggle_oscillate:
    alias: "Dyson Fan - Toggle Oscillate"
    sequence:
      # Ensure that setting temperature is not currently running to guarantee
      # atomicity with that script.
      - wait_template: >
          {{ is_state("script.dyson_fan_toggle_speed", "off") }}
      - condition: state
        entity_id: input_boolean.dyson_fan_power
        state: "on"
      - service: script.dyson_fan_send_command
        data:
          harmony_command: Oscillate
          broadlink_command: toggle_oscillate
      - service: input_boolean.toggle
        target:
          entity_id: input_boolean.dyson_fan_oscillating
      # Delay to allow time for the AC to process the command.
      - delay:
          milliseconds: 100
    mode: single
    icon: mdi:fan
  dyson_fan_toggle_speed:
    alias: "Dyson Fan - Toggle Speed"
    sequence:
      # Delay to allow time for any existing fan scripts to run and finish.
      - delay:
          milliseconds: 100
      # Fail if another AC command is running to guarantee atomicity.
      - condition: state
        entity_id: script.dyson_fan_send_command
        state: "off"
      - condition: state
        entity_id: input_boolean.dyson_fan_power
        state: "on"
      - service: script.dyson_fan_send_command
        data_template:
          harmony_command: >
            {% if increase_speed %}
              FanModeUp
            {% else %}
              FanModeDown
            {% endif %}
          broadlink_command: >
            {% if increase_speed %}
              increase_speed
            {% else %}
              decrease_speed
            {% endif %}
      - service_template: >
          {% if increase_speed %}
            input_number.increment
          {% else %}
            input_number.decrement
          {% endif %}
        target:
          entity_id: input_number.dyson_fan_speed
    mode: queued
    icon: mdi:fan-plus
    max: 9
  dyson_fan_increase_speed:
    alias: "Dyson Fan - Increase Speed"
    sequence:
      - service: script.dyson_fan_toggle_speed
        data:
          increase_speed: true
    mode: queued
    icon: mdi:fan-plus
    max: 9
  dyson_fan_decrease_speed:
    alias: "Dyson Fan - Decrease Speed"
    sequence:
      - service: script.dyson_fan_toggle_speed
        data:
          increase_speed: false
    mode: queued
    icon: mdi:fan-minus
    max: 9
  dyson_fan_set_speed:
    alias: "Dyson Fan - Set Speed"
    mode: restart
    sequence:
      - repeat:
          while: >
            {{ is_state("input_boolean.dyson_fan", "on") and
            states('input_number.dyson_fan_speed') | int * 10 !=
            percentage and repeat.index < 10 }}
          sequence:
            - service_template: >
                {% if states('input_number.dyson_fan_speed') <
                states('input_number.dyson_fan_target_speed') %}
                  script.dyson_fan_increase_speed
                {% else %}
                  script.dyson_fan_decrease_speed
                {% endif %}
    icon: mdi:fan

automation:
  - id: dyson_fan_set_speed
    alias: "Dyson Fan - Set Speed"
    description: >
      Sets the fan speed to the target speed.
    trigger:
      - platform: state
        entity_id: input_boolean.dyson_fan_power
        to: "on"
      - platform: state
        entity_id: input_number.dyson_fan_target_speed
    mode: single
    action:
      - repeat:
          while: >
            {{ is_state('input_boolean.dyson_fan_power', "on") and
              states('input_number.dyson_fan_target_speed') | int !=
              states('input_number.dyson_fan_speed') | int }}
          sequence:
            - service_template: >
                {% if states('input_number.dyson_fan_speed') | int <
                states('input_number.dyson_fan_target_speed') | int %}
                  script.dyson_fan_increase_speed
                {% else %}
                  script.dyson_fan_decrease_speed
                {% endif %}

fan:
  - platform: template
    fans:
      dyson_fan:
        friendly_name: Dyson Fan
        unique_id: fan.dyson_fan
        value_template: >
          {{ states('input_boolean.dyson_fan_power') }}
        oscillating_template: >
          {{ is_state('input_boolean.dyson_fan_oscillating', "on") }}
        percentage_template: >
          {{ states('input_number.dyson_fan_target_speed') | int * 10 }}
        turn_on:
          - condition: state
            entity_id: input_boolean.dyson_fan_power
            state: "off"
          - service: script.dyson_fan_toggle_power
          - service: input_boolean.turn_off
            target:
              entity_id: input_boolean.dyson_fan_oscillating
        turn_off:
          - condition: state
            entity_id: input_boolean.dyson_fan_power
            state: "on"
          - service: script.dyson_fan_toggle_power
          - service: input_boolean.turn_off
            target:
              entity_id: input_boolean.dyson_fan_oscillating
        set_oscillating:
          service: script.dyson_fan_toggle_oscillate
        set_percentage:
          - service: input_number.set_value
            target:
              entity_id: input_number.dyson_fan_target_speed
            data:
              value: "{{ percentage | int / 10 }}"
        speed_count: 10
