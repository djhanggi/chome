---
homeassistant:
  customize:
    automation.climate_dyson_heater_fan_sync_temperature:
      icon: mdi:heat-wave

logbook:
  exclude:
    entities:
      - input_boolean.climate_dyson_heater_fan_power
      - input_boolean.climate_dyson_heater_fan_oscillating
      - input_number.climate_dyson_heater_fan_speed
      - input_number.climate_dyson_heater_fan_target_speed
      - input_number.climate_dyson_heater_fan_temperature
      - input_number.climate_dyson_heater_fan_target_temperature
      - input_select.climate_dyson_heater_fan_next_power_command
      - script.climate_dyson_heater_fan_send_command
      - script.climate_dyson_heater_fan_toggle_state
      - automation.climate_dyson_heater_fan_sync_temperature

input_boolean:
  climate_dyson_heater_fan_oscillating:
    name: Climate - Dyson Heater Fan - Oscillating
    icon: mdi:fan
  climate_dyson_heater_fan_power:
    name: Climate - Dyson Heater Fan - Power
    icon: mdi:fan

input_number:
  climate_dyson_heater_fan_speed:
    name: Climate - Dyson Heater Fan - Speed
    icon: mdi:fan
    min: 1
    max: 10
    step: 1
  climate_dyson_heater_fan_target_speed:
    name: Climate - Dyson Heater Fan - Target Speed
    icon: mdi:fan
    min: 1
    max: 10
    step: 1
  climate_dyson_heater_fan_temperature:
    name: Climate - Dyson Heater Fan - Temperature
    icon: mdi:thermometer
    min: 32
    max: 99
    step: 1
  climate_dyson_heater_fan_target_temperature:
    name: Climate - Dyson Heater Fan - Target Temperature
    icon: mdi:thermometer
    min: 32
    max: 99
    step: 1

input_select:
  climate_dyson_heater_fan_next_oscillate_command:
    name: Climate - Dyson Heater Fan - Next Power Command
    icon: mdi:power
    options:
      - oscillate_command_1
      - oscillate_command_2
  climate_dyson_heater_fan_next_power_command:
    name: Climate - Dyson Heater Fan - Next Power Command
    icon: mdi:power
    options:
      - power_command_1
      - power_command_2

script:
  climate_dyson_heater_fan_correct_power:
    alias: Climate - Dyson Heater Fan - Correct Power
    icon: mdi:fan-alert
    mode: single
    sequence:
      - service: script.climate_dyson_heater_fan_send_command
        data:
          command: |
            {{ states("input_select.climate_dyson_heater_fan_next_power_command") }}
      - service: input_select.select_next
        target:
          entity_id: input_select.climate_dyson_heater_fan_next_power_command
      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.climate_dyson_heater_fan_oscillating
  climate_dyson_heater_fan_send_command:
    alias: Climate - Dyson Heater Fan - Send Command
    description:
      Sends a command to the Dyson Heater Fan, particularly to manage atomicity.
    icon: mdi:fan
    mode: single
    sequence:
      - service: remote.send_command
        data:
          command: "{{ command }}"
          device: climate_dyson_heater_fan
        target:
          entity_id: remote.bedroom_broadlink_remote
      - delay:
          # The Climate - Dyson Heater Fan requires a break between commands
          milliseconds: 500
  climate_dyson_heater_fan_toggle_state:
    alias: Climate - Dyson Heater Fan - Toggle State
    icon: mdi:fan
    mode: queued
    fields:
      command:
        description: |
          One of:
            - toggle_power
            - toggle_oscillate
            - sync_speed
            - sync_temperature
    sequence:
      - if:
          - "{{ command is undefined }}"
        then:
          - stop: command was not specified
      - wait_template:
          '{{ is_state("script.climate_dyson_heater_fan_send_command", "off") }}'
      - wait_template:
          '{{ is_state("script.climate_dyson_heater_fan_correct_power", "off") }}'
      - variables:
          current_speed:
            '{{ states("input_number.climate_dyson_heater_fan_speed") | int }}'
          target_speed:
            '{{ states("input_number.climate_dyson_heater_fan_target_speed") | int }}'
          current_temperature:
            '{{ states("input_number.climate_dyson_heater_fan_temperature") | int }}'
          target_temperature:
            '{{ states("input_number.climate_dyson_heater_fan_target_temperature") | int
            }}'
      - choose:
          - conditions:
              - '{{ command == "toggle_power" }}'
            sequence:
              - service: script.climate_dyson_heater_fan_send_command
                data:
                  command: |
                    {{ states("input_select.climate_dyson_heater_fan_next_power_command") }}
              - service: input_select.select_next
                target:
                  entity_id: input_select.climate_dyson_heater_fan_next_power_command
              - service: input_boolean.toggle
                target:
                  entity_id: input_boolean.climate_dyson_heater_fan_power
          - conditions:
              - '{{ command == "toggle_oscillate" }}'
            sequence:
              - entity_id: input_boolean.climate_dyson_heater_fan_power
                condition: state
                state: "on"
              - variables:
                  is_oscillating:
                    '{{ is_state("input_boolean.climate_dyson_heater_fan_oscillating",
                    "on") }}'
              - delay:
                  milliseconds: 500
              - service: script.climate_dyson_heater_fan_send_command
                data:
                  command:
                    '{{ "oscillate_off" if is_oscillating else "oscillate_on" }}'
              - service: input_boolean.toggle
                target:
                  entity_id: input_boolean.climate_dyson_heater_fan_oscillating
          - conditions:
              - '{{ command == "sync_speed" }}'
            sequence:
              - entity_id: input_boolean.climate_dyson_heater_fan_power
                condition: state
                state: "on"
              - variables:
                  increase_speed: "{{ target_speed > current_speed }}"
              - condition: "{{ target_speed != current_speed }}"
              - service: script.climate_dyson_heater_fan_send_command
                data:
                  command:
                    '{{ "increase_speed" if increase_speed else "decrease_speed"
                    }}'
              - service:
                  '{{ "input_number.increment" if increase_speed else
                  "input_number.decrement" }}'
                target:
                  entity_id: input_number.climate_dyson_heater_fan_speed
              - delay:
                  # The Climate - Dyson Heater Fan requires a break between speed commands
                  milliseconds: 500
          - conditions:
              - '{{ command == "sync_temperature" }}'
            sequence:
              - entity_id: input_boolean.climate_dyson_heater_fan_power
                condition: state
                state: "on"
              - variables:
                  increase_temperature:
                    "{{ target_temperature > current_temperature }}"
              - condition: "{{ target_temperature != current_temperature }}"
              - service: script.climate_dyson_heater_fan_send_command
                data:
                  command:
                    '{{ "increase_temperature" if increase_temperature else
                    "decrease_temperature" }}'
              - service:
                  '{{ "input_number.increment" if increase_temperature else
                  "input_number.decrement" }}'
                target:
                  entity_id: input_number.climate_dyson_heater_fan_temperature
              - delay:
                  # The Climate - Dyson Heater Fan requires a break between temperature commands
                  milliseconds: 500
      - if:
          - "{{ target_speed != current_speed }}"
          - condition: state
            entity_id: input_boolean.climate_dyson_heater_fan_power
            state: "on"
        then:
          - service: script.turn_on
            data:
              variables:
                command: sync_speed
            target:
              entity_id: script.climate_dyson_heater_fan_toggle_state
      - if:
          - "{{ target_temperature != current_temperature }}"
          - condition: state
            entity_id: input_boolean.climate_dyson_heater_fan_power
            state: "on"
        then:
          - service: script.turn_on
            data:
              variables:
                command: sync_temperature
            target:
              entity_id: script.climate_dyson_heater_fan_toggle_state
    max: 5

automation:
  - id: climate_dyson_heater_fan_sync_temperature
    alias: Climate - Dyson Heater Fan - Sync Temperature
    mode: restart
    trigger:
      - platform: state
        entity_id: input_number.climate_dyson_heater_fan_target_temperature
    condition:
      - condition: state
        entity_id: input_boolean.climate_dyson_heater_fan_power
        state: "on"
    action:
      - service: script.turn_on
        target:
          entity_id: script.climate_dyson_heater_fan_toggle_state
        data:
          variables:
            command: sync_temperature

fan:
  - platform: template
    fans:
      climate_dyson_heater_fan:
        unique_id: fan.climate_dyson_heater_fan
        friendly_name: Dyson Heater Fan
        oscillating_template: |
          {{ is_state("input_boolean.climate_dyson_heater_fan_oscillating", "on") }}
        percentage_template: |
          {{ states("input_number.climate_dyson_heater_fan_target_speed") | int * 10 }}
        set_oscillating:
          - condition: |
              {{ states("input_boolean.climate_dyson_heater_fan_oscillating") != oscillating }}
          - service: script.climate_dyson_heater_fan_toggle_state
            data:
              command: toggle_oscillate
        set_percentage:
          - variables:
              target_speed: |
                {% set target_speed = (percentage | int / 10) | int %}
                {{ target_speed if target_speed != 0 else 1 }}
          - service: input_number.set_value
            data:
              value: "{{ target_speed }}"
            target:
              entity_id: input_number.climate_dyson_heater_fan_target_speed
          - service: script.turn_on
            data:
              variables:
                command: sync_speed
            target:
              entity_id: script.climate_dyson_heater_fan_toggle_state
        speed_count: 10
        turn_off:
          - entity_id: input_boolean.climate_dyson_heater_fan_power
            condition: state
            state: "on"
          - service: script.climate_dyson_heater_fan_toggle_state
            data:
              command: toggle_power
          - service: input_boolean.turn_off
            target:
              entity_id: input_boolean.climate_dyson_heater_fan_oscillating
        turn_on:
          - entity_id: input_boolean.climate_dyson_heater_fan_power
            condition: state
            state: "off"
          - service: script.climate_dyson_heater_fan_toggle_state
            data:
              command: toggle_power
        value_template: |
          {{ states("input_boolean.climate_dyson_heater_fan_power") }}
