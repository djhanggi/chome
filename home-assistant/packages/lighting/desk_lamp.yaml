---
homeassistant:
  customize:
    automation.desk_lamp_timing:
      icon: mdi:sun-clock
    binary_sensor.desk_lamp_used_today:
      icon: mdi:sun-clock

timer:
  desk_lamp_timer:
    name: Desk Lamp - Timer
    duration: "00:30:00"
    icon: mdi:sun-clock

automation:
  - id: desk_lamp_timing
    alias: Desk Lamp - Timing
    mode: restart
    trigger:
      - id: reset_day
        entity_id: sensor.phase_of_day
        platform: state
        from: Sleeping
        to:
          - Morning
          - Daytime
      - id: chair
        platform: state
        entity_id: binary_sensor.location_at_desk_chair
      - id: lamp
        entity_id: switch.desk_lamp
        platform: state
      - id: timer
        platform: event
        event_type:
          - timer.started
          - timer.restarted
          - timer.paused
          - timer.finished
          - timer.cancelled
        event_data:
          entity_id: timer.desk_lamp_timer
    condition:
      - condition: state
        entity_id: sensor.phase_of_day
        state:
          - Morning
          - Daytime
    action:
      - if: '{{ trigger.id == "reset_day" }}'
        then:
          - service: timer.cancel
            target:
              entity_id: timer.desk_lamp_timer
          - stop:
      - variables:
          at_desk_chair:
            '{{ is_state("binary_sensor.location_at_desk_chair", "on")}}'
          has_used_lamp:
            '{{ is_state("binary_sensor.desk_lamp_used_today", "on") }}'
          timer_active: '{{ is_state("timer.desk_lamp_timer", "active") }}'
          lamp_on: |
            {{ 
              (trigger.id == "chair" and at_desk_chair and (not has_used_lamp or timer_active)) or
              (trigger.id == "lamp" and is_state("switch.desk_lamp", "on")) or
              (trigger.id == "timer" and timer_active)
            }}
          timer_service: |
            {% if lamp_on and not timer_active %}
              timer.start
            {% elif not lamp_on and timer_active %}
              timer.pause
            {% elif has_used_lamp and timer_active %}
              timer.finish
            {% endif %}
      - service: |
          {% if lamp_on %}
            switch.turn_on
          {% else %}
            switch.turn_off
          {% endif %}
        target:
          entity_id: switch.desk_lamp
      - if: '{{ timer_service != "" }}'
        then:
          - service: "{{ timer_service }}"
            target:
              entity_id: timer.desk_lamp_timer

template:
  - trigger:
      - id: start
        platform: homeassistant
        event: start
      - id: reset_day
        entity_id: sensor.phase_of_day
        platform: state
        from: Sleeping
        to:
          - Morning
          - Daytime
      - id: timer_ended
        platform: event
        event_type: timer.finished
        event_data:
          entity_id: timer.desk_lamp_timer
    binary_sensor:
      - unique_id: desk_lamp_used_today
        name: Desk Lamp - Used Today
        state: '{{ trigger.id == "timer_ended" }}'
