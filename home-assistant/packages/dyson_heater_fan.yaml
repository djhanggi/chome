---
homeassistant:
  customize:
    automation.dyson_heater_fan_set_speed:
      icon: mdi:speedometer

logbook:
  exclude:
    entities:
      - script.dyson_heater_fan_send_command
      - script.dyson_heater_fan_toggle_power
      - script.dyson_heater_fan_toggle_oscillate
      - script.dyson_heater_fan_toggle_speed

input_boolean:
  dyson_heater_fan_power:
    name: Dyson Heater Fan - Power
    initial: "off"
    icon: mdi:fan
  dyson_heater_fan_oscillating:
    name: Dyson Heater Fan - Oscillating
    initial: "off"
    icon: mdi:fan

input_number:
  dyson_heater_fan_speed:
    name: Dyson Heater Fan - Speed
    min: 1
    max: 10
    step: 1
    icon: mdi:fan
  dyson_heater_fan_target_speed:
    name: Dyson Heater Fan - Target Speed
    min: 1
    max: 10
    step: 1
    icon: mdi:fan

script:
  dyson_heater_fan_send_command:
    alias: Dyson Heater  Fan - Send Command
    description: >
      Sends a command to the Dyson Heater Fan, particularly to manage atomicity.
    sequence:
      - service: remote.send_command
        target:
          entity_id: remote.bedroom_broadlink_remote
        data_template:
          device: dyson_heater_fan
          command: "{{ command }}"
    mode: single
    icon: mdi:fan
  dyson_heater_fan_toggle_power:
    alias: Dyson Heater Fan - Toggle Power
    sequence:
      # Ensure that setting temperature is not currently running to guarantee
      # atomicity with that script.
      - wait_template: >
          {{ is_state("script.dyson_heater_fan_toggle_speed", "off") }}
      - service: script.dyson_heater_fan_send_command
        data_template:
          command: >
            {% if is_state("input_boolean.dyson_heater_fan_power", "off") %}
              power_on
            {% else %}
              power_off
            {% endif %}
      - service: input_boolean.toggle
        target:
          entity_id: input_boolean.dyson_heater_fan_power
      # Delay to allow time for the AC to process the command.
      - delay:
          milliseconds: 500
    mode: queued
    icon: mdi:fan
  dyson_heater_fan_toggle_oscillate:
    alias: Dyson Heater Fan - Toggle Oscillate
    fields:
      oscillating:
        name: Oscillating
        default: true
    sequence:
      # Ensure that setting temperature is not currently running to guarantee
      # atomicity with that script.
      - wait_template: >
          {{ is_state("script.dyson_heater_fan_toggle_speed", "off") }}
      - condition: state
        entity_id: input_boolean.dyson_heater_fan_power
        state: "on"
      - condition: template
        value_template: >
          {{ is_state("input_boolean.dyson_heater_fan_oscillating",  "off" if
          (oscillating | default(True, True)) else "on") }}
      - service: script.dyson_heater_fan_send_command
        data_template:
          command: >
            {% if oscillating %}
              oscillate_on
            {% else %}
              oscillate_off
            {% endif %}
      - service_template: >
          {% if oscillating %}
            input_boolean.turn_on
          {% else %}
            input_boolean.turn_off
          {% endif %}
        target:
          entity_id: input_boolean.dyson_heater_fan_oscillating
      # Delay to allow time for the AC to process the command.
      - delay:
          milliseconds: 500
    mode: single
    icon: mdi:fan
  dyson_heater_fan_toggle_speed:
    alias: Dyson Heater Fan - Toggle Speed
    sequence:
      # Delay to allow time for any existing fan scripts to run and finish.
      - delay:
          milliseconds: 500
      # Fail if another AC command is running to guarantee atomicity.
      - condition: state
        entity_id: script.dyson_heater_fan_send_command
        state: "off"
      - condition: state
        entity_id: input_boolean.dyson_heater_fan_power
        state: "on"
      - service: script.dyson_heater_fan_send_command
        data_template:
          command: >
            {% if increase_speed %}
              increase_speed
            {% else %}
              decrease_speed
            {% endif %}
      - service_template: >
          {% if increase_speed %}
            input_number.increment
          {% else %}
            input_number.decrement
          {% endif %}
        target:
          entity_id: input_number.dyson_heater_fan_speed
    mode: queued
    icon: mdi:fan-plus
    max: 9

automation:
  - id: dyson_heater_fan_set_speed
    alias: Dyson Heater Fan - Set Speed
    description: >
      Sets the fan speed to the target speed.
    trigger:
      - platform: state
        entity_id: input_boolean.dyson_heater_fan_power
        to: "on"
      - platform: state
        entity_id: input_number.dyson_heater_fan_target_speed
    mode: single
    action:
      - repeat:
          while: >
            {{ is_state("input_boolean.dyson_heater_fan_power", "on") and
              states("input_number.dyson_heater_fan_target_speed") | int !=
              states("input_number.dyson_heater_fan_speed") | int }}
          sequence:
            - service: script.dyson_heater_fan_toggle_speed
              data_template:
                increase_speed: >
                  {{ states("input_number.dyson_heater_fan_speed") | int <
                  states("input_number.dyson_heater_fan_target_speed") | int }}
  - id: dyson_heater_fan_oscillate_on_start
    alias: Dyson Heater Fan - Oscillate On Start
    trigger:
      - platform: state
        entity_id: fan.dyson_heater_fan
        from: "off"
        to: "on"
    action:
      - service: fan.oscillate
        target:
          entity_id: fan.dyson_heater_fan
        data:
          oscillating: true
    mode: single

fan:
  - platform: template
    fans:
      dyson_heater_fan:
        friendly_name: Dyson Heater Fan
        unique_id: fan.dyson_heater_fan
        value_template: >
          {{ states("input_boolean.dyson_heater_fan_power") }}
        oscillating_template: >
          {{ is_state("input_boolean.dyson_heater_fan_oscillating", "on") }}
        percentage_template: >
          {{ states("input_number.dyson_heater_fan_target_speed") | int * 10 }}
        turn_on:
          - condition: state
            entity_id: input_boolean.dyson_heater_fan_power
            state: "off"
          - service: script.dyson_heater_fan_toggle_power
          - service: input_boolean.turn_off
            target:
              entity_id: input_boolean.dyson_heater_fan_oscillating
        turn_off:
          - condition: state
            entity_id: input_boolean.dyson_heater_fan_power
            state: "on"
          - service: script.dyson_heater_fan_toggle_power
          - service: input_boolean.turn_off
            target:
              entity_id: input_boolean.dyson_heater_fan_oscillating
        set_oscillating:
          - service: script.dyson_heater_fan_toggle_oscillate
            data_template:
              oscillating: "{{ oscillating }}"
        set_percentage:
          - service: input_number.set_value
            target:
              entity_id: input_number.dyson_heater_fan_target_speed
            data:
              value: "{{ percentage | int / 10 }}"
        speed_count: 10
